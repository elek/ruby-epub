#!/usr/bin/ruby
=begin

Copyright 2008 Arachne Jericho <arachne.jericho@gmail.com>

This file is part of RubyEpub.

RubyEpub is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

RubyEpub is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with RubyEpub.  If not, see <http://www.gnu.org/licenses/>.

=end
#
# Creates, compiles, adds, etc. epub projects and epub 
# files.
#
require 'epub'
require 'optparse'
require 'ostruct'
require 'rexml/document'

def help
    puts <<-END
Usage: #{$0} <action> <directory> [options]

Available actions: 

help
    Shows this help.

create <directory> [--title "title" --author "last,first"]

    Creates a new ePub project; <directory> should not exist beforehand.

    Supports: 

        --title TITLE           Title of the work (defaults to TITLE)
        --author AUTHOR         Author in last-name, first-name form (optional)
        --language LANG         Language the work is in (defaults to en-US)

compile [<directory>]

    Compiles an ePub project.  If no directory is specified, assumes 
    current directory.

add-to-opf [<directory>] <file1> <file2> ...

    Adds the rest of the commandline as files to the OPF file.  

    A directory does not have to be specified if the first item in the 
    file list is a non-directory.

add-to-ncx [<directory>] <file1> <file2> ... 

    Adds the rest of the commandline, in order, as navigation points in
    the NCX file.  No nesting specifications yet.  

    A directory does not have to be specified if the first item in the 
    file list is a non-directory.

    The labels for the navigation points are derived from the title 
    attribute of the HTML files.

add-guide [<directory>] <file> --type "toc" --title "Table of Contents"

    Registers <file> as a reference item to the guide.

    A directory does not have to be specified if the first item in the 
    file list is a non-directory.

    Requires: 

        --type TYPE             Type of the guide; examples: toc, text
        --title TITLE           Title of the guide 

Hints: 
    If you're currently in an Epub directory, you can specify "." 
    as the directory.  Example: 

        epub compile .

    END
end

def exit_with_error(msg)
    STDERR.puts msg
    help
    exit 1
end

def create_project
    $project = Epub::Project.new $directory
end

def main
    if (ARGV[0] == 'help')
        help
        exit 0
    end

    if (ARGV.size < 1)
        exit_with_error "At least an action must be provided. For more information, see #{$0} help"
    end

    $action = ARGV.shift

    case $action
    when 'create'
        if ARGV.size < 1
            exit_with_error "Create must have a directory specified."
        end
        $directory = ARGV.shift
        create_project

        options = parse_options ARGV
        $project.title = options.title if options.title
        $project.language = options.language if options.language
        $project.add_creator(options.author, 'aut') if options.author

        $project.save

    when 'compile'
        if ARGV.size < 1
            $directory = '.' 
        else
            $directory = ARGV.shift
        end
        create_project

        $project.compile

    when 'add-to-opf' 
        if File.file? ARGV[0]
            $directory = '.'
        else
            $directory = ARGV.shift
        end
        create_project

        ARGV.each do |arg|
            id = create_id arg
            add_to_spine = (arg =~ /\.html$/)
            $project.register_with_opf(id, arg, add_to_spine)
        end
        $project.save

    when 'add-guide'
        if File.file? ARGV[0]
            $directory = '.'
        else
            $directory = ARGV.shift
        end
        create_project

        file = ARGV.shift
        options = parse_options ARGV
        $project.register_guide_reference(options.guide_type, options.title, file)
        $project.save

    when 'add-to-ncx'
        if File.file? ARGV[0]
            $directory = '.'
        else
            $directory = ARGV.shift
        end
        create_project

        ARGV.each do |arg|
            id = create_id arg
            label = get_ncx_label arg

            $project.register_with_ncx(id, label, arg)
        end
        $project.save

    else 
        help
        exit 1

    end

end

def parse_options(args)
    options = OpenStruct.new

    opts = OptionParser.new do |opts|
        opts.on('-t', '--title TITLE') { |title| options.title = title }
        opts.on('-a', '--author AUTHOR') { |author| options.author = author }
        opts.on('-l', '--language LANG') { |lang| options.language = lang }
        opts.on('-y', '--type TYPE') { |type| options.guide_type = type }
    end

    opts.parse! args

    return options
end

# Turns the given filename into a standard ruby-epub file ID, 
# for consistent reference in the manifest and the spine.
def create_id(filename)
    id = filename.gsub(%r|[^-A-Za-z0-9_]|, '')
    id.gsub!(/-/, '_')
    return id
end

# Creates the NCX label for an HTML file based on the html/head/title 
# text.
def get_ncx_label(file)
    label = ''
    File.open(file) do |file|
        doc = REXML::Document.new file
        label = doc.elements['html/head/title'].text
    end
    return label
end


main
